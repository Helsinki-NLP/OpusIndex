# -*-makefile-*-


SHELL              := bash

ifeq (${shell hostname --domain 2>/dev/null},bullx)
  HPC_HOST = puhti
endif

## scratch/work space
## TODO: remove hard-coded scratch space location

ifneq (${wildcard /scratch/project_2000661/tmp},)
  TMPDIR := /scratch/project_2000661/tmp
endif

TMPDIR ?= /tmp

ifdef LOCAL_SCRATCH
  TMPDIR := ${LOCAL_SCRATCH}
endif

WORKDIR ?= ${TMPDIR}

#---------------------------------------------------------------
# general tools that we will use for pre-processing & alignment
#---------------------------------------------------------------

## number of cores available and number of threads to be used
## restrict threads to 4 on login nodes
## (TODO: should we restrict threads in sort etc to leave some cores
##        for other tasks as well?)
CORES    := ${shell nproc}
THREADS  ?= $(shell if [ `hostname | grep login | wc -l` -gt 0 ]; then echo 4; else echo ${CORES}; fi )

## use pigz for multi-threaded (de-)compression
## TODO: should we optimise some parameters?
GZIP     := ${shell which pigz 2>/dev/null || echo gzip}
GZCAT    := ${GZIP} -cd
ZCAT     := gzip -cd

SORT     := sort -T ${TMPDIR} -S1G --parallel=${THREADS}
# SORT   := sort -T ${TMPDIR} -S1G --parallel=${THREADS} --compress-program=${GZIP}

UNIQ     := ${SORT} -u
MERGE    := ${SORT} -m -u


## I don't really trust parsort ...

# ifneq (${shell which parsort 2>/dev/null},)
#   SORT   := parsort -T ${TMPDIR} -S1G
# endif



## seems to be necessary to run with threads on HPC nodes
## (nproc is not reliable?)
ifneq (${GZIP},gzip)
  GZIP += -p ${THREADS}
endif


## use GNU parallel if available
## TODO: should we reduce number of threads?
## TODO: should we optimise other settings?
PARALLEL_ARGS := --max-procs 25% \
		 --pipe --keep-order -q

# --max-procs ${THREADS} \
# --compress --compress-program ${GZIP}

PARALLEL := ${shell if [ `which parallel 2>/dev/null | wc -l` -gt 0 ]; then echo 'parallel ${PARALLEL_ARGS}'; fi }


## convenient function to reverse a list
reverse = $(if $(wordlist 2,2,$(1)),$(call reverse,$(wordlist 2,$(words $(1)),$(1))) $(firstword $(1)),$(1))


